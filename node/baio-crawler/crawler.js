// Generated by CoffeeScript 1.6.2
(function() {
  var amqp, async, exports, onPop, push, req, request, start, _opts, _parse;

  async = require("async");

  req = require("request");

  amqp = require("./../../../node/baio-crawler/amqp");

  _opts = null;

  _parse = null;

  push = function(level, urls) {
    var url, _i, _len, _results;

    if (urls && urls.length) {
      _results = [];
      for (_i = 0, _len = urls.length; _i < _len; _i++) {
        url = urls[_i];
        _results.push(amqp.pub(_opts.amqp.queue, {
          level: level,
          url: url
        }));
      }
      return _results;
    }
  };

  request = function(url, done) {
    if (!/https?:\/\//.match(url)) {
      url = "http://" + url;
    }
    return req({
      url: url,
      method: "get"
    }, done);
  };

  onPop = function(level, url, done) {
    return async.waterfall([
      function(ck) {
        return request(url, ck);
      }, function(resp, ck) {
        var body;

        level = -1;
        body = "";
        return _parse(level, body, ck);
      }
    ], done);
  };

  start = function(opts, parse) {
    _opts = opts;
    _parse = parse;
    amqp.setConfig(opts.amqp.config);
    return amqp.connect(function() {
      return amqp.sub({
        queue: opts.amqp.queue,
        onPop: function(data, ack) {
          var level, url;

          level = data.level;
          url = data.url;
          return onPop(level, url, function(err, links) {
            if (!err) {
              push(level + 1, links);
            }
            return ack();
          });
        }
      }, function(err) {
        return console.log(err, "subscribed");
      });
    });
  };

  exports = start;

  start({
    amqp: {
      config: {
        url: "amqp://localhost"
      },
      queue: "baio-crawler"
    }
  }, function(level, body, done) {
    console.log(level, body);
    return done(null);
  });

}).call(this);

/*
//@ sourceMappingURL=crawler.map
*/

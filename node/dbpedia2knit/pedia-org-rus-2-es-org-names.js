// Generated by CoffeeScript 1.6.2
(function() {
  var async, checkEnName, checkRuName, es, fs, getEnName, getRuName, jsonSparql2struct, pedia2es, req, _RQ_TEMPLATE, _SPARQL_URI, _createNames;

  fs = require("fs");

  req = require("request");

  es = require("../es/es");

  async = require("async");

  _SPARQL_URI = "http://dbpedia.org/sparql";

  _RQ_TEMPLATE = "dbpedia_org_request_template.txt";

  checkRuName = function(n) {
    var name, name_lang;

    if (!n) {
      return null;
    }
    name = n.value.toLowerCase();
    name_lang = n["xml:lang"];
    if (name_lang === "en" || name_lang === "uk") {
      if (name.match(/^[\u0400-\u04FF\s]+$/gi)) {
        return name;
      }
    } else {
      return null;
    }
  };

  checkEnName = function(n) {
    var name, name_lang;

    if (!n) {
      return null;
    }
    name = n.value.toLowerCase();
    name_lang = n["xml:lang"];
    if (name_lang === "en" || name_lang === "uk") {
      return name;
    } else {
      return null;
    }
  };

  getRuName = function(i) {
    var foaf_name, label, n, name, r, _i, _len, _ref;

    name = checkRuName(i.name);
    label = checkRuName(i.label);
    foaf_name = checkRuName(i.foaf_name);
    r = "";
    _ref = [name, label, foaf_name];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      if (!r || (n && n.length < r.length)) {
        r = n;
      }
    }
    return r;
  };

  getEnName = function(i) {
    var foaf_name, label, n, name, r, _i, _len, _ref;

    name = checkRuName(i.name);
    label = checkRuName(i.label);
    foaf_name = checkRuName(i.foaf_name);
    if (name) {
      name = null;
    } else {
      name = checkEnName(i.name);
    }
    if (label) {
      label = null;
    } else {
      label = checkEnName(i.label);
    }
    if (foaf_name) {
      foaf_name = null;
    } else {
      name = checkEnName(i.foaf_name);
    }
    r = "";
    _ref = [name, label, foaf_name];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      if (!r || (n && n.length < r.length)) {
        r = n;
      }
    }
    return r;
  };

  jsonSparql2struct = function(j) {
    var data, doc, en_name, i, id, item, latest, obj, res, ru_name, _i, _j, _len, _len1, _ref;

    latest = null;
    res = [];
    _ref = j.results.bindings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      id = i.s.value.toLowerCase();
      if (id !== latest) {
        item = {
          id: id,
          en_name: "",
          ru_name: ""
        };
        res.push(item);
        latest = id;
      }
      ru_name = getRuName(i);
      en_name = getEnName(i);
      if (!item.ru_name || (ru_name && item.ru_name.length > ru_name.length)) {
        item.ru_name = ru_name;
      }
      if (!item.en_name || (en_name && item.en_name.length > en_name.length)) {
        item.en_name = en_name;
      }
    }
    data = [];
    for (_j = 0, _len1 = res.length; _j < _len1; _j++) {
      doc = res[_j];
      obj = {
        _id: doc.en_name,
        _type: "rus",
        val: doc.en_name,
        lang: "en",
        uri: doc.id
      };
      data.push(obj);
      if (doc.ru_name) {
        obj = {
          _id: doc.ru_name,
          _type: "rus",
          val: doc.ru_name,
          lang: "ru",
          uri: doc.id
        };
        data.push(obj);
      }
    }
    return data;
  };

  pedia2es = function(uri, index, sparqlData, done) {
    var data, opts;

    data = jsonSparql2struct(sparqlData);
    opts = {
      uri: uri,
      index: index,
      settingsPath: "./names_index.json"
    };
    return es.createIndex(opts, function(err) {
      if (!err || err.status === 400) {
        return es.bulk(uri, index, data, done);
      } else {
        return done(err);
      }
    });
  };

  exports.convert = function(esUri, done) {
    var params, tmpl;

    tmpl = fs.readFileSync(_RQ_TEMPLATE, "utf-8");
    params = ["?s a dbpedia-owl:Organisation; dbpedia-owl:locationCountry dbpedia:Russia."];
    return async.map(params, (function(prm, ck) {
      var query;

      query = tmpl.replace("{0}", "").replace("{1}", "").replace("{2}", prm);
      return _createNames(esUri, query, ck);
    }), done);
  };

  _createNames = function(esUri, query, done) {
    var data;

    console.log(query);
    data = {
      "default-graph-uri": "http://dbpedia.org",
      "query": query,
      "format": "application/sparql-results+json",
      "timeout": 30000
    };
    return req.get({
      uri: _SPARQL_URI,
      qs: data
    }, function(err, data) {
      if (!err) {
        return pedia2es(esUri, "org-names", JSON.parse(data.body), done);
      } else {
        return done(err);
      }
    });
  };

}).call(this);

/*
//@ sourceMappingURL=pedia-org-rus-2-es-org-names.map
*/

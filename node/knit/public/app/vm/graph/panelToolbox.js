// Generated by CoffeeScript 1.6.2
(function() {
  define(["ural/modules/pubSub"], function(pubSub) {
    var PanelToolbox;

    return PanelToolbox = (function() {
      function PanelToolbox(nav, panel) {
        var _this = this;

        this.nav = nav;
        this.panel = panel;
        this.isShown = ko.observable(false);
        this.colorScheme = ko.observable(0);
        this.colorSchemesList = ko.observableArray([
          {
            key: 0,
            val: "Темная"
          }, {
            key: 1,
            val: "Светлая"
          }
        ]);
        this.colorScheme.subscribe(function(val) {
          if (val === 0) {
            $("#_body").removeClass("light");
            $("#show_toolbox_panel_button").css({
              color: "white"
            });
            _this.panel.updateText(_this._getTextCls());
          }
          if (val === 1) {
            $("#show_toolbox_panel_button").css({
              color: "black"
            });
            $("#_body").addClass("light");
            return _this.panel.updateText(_this._getTextCls());
          }
        });
        this.font = ko.observable(0);
        this.fontsList = ko.observableArray([
          {
            key: 0,
            val: "Маленькие"
          }, {
            key: 1,
            val: "Большие"
          }, {
            key: 2,
            val: "Не показывать"
          }
        ]);
        this.font.subscribe(function() {
          return _this.panel.updateText(_this._getTextCls());
        });
        this.layout = ko.observable(0);
        this.layoutsList = ko.observableArray([
          {
            key: 0,
            val: "Использовать силу связей"
          }, {
            key: 1,
            val: "Не использовать"
          }
        ]);
        this.layout.subscribe(function(val) {
          return _this.panel.setForceLayout(val === 0);
        });
        this.activeTab = ko.observable("find");
        this.activeTab.subscribe(function(val) {
          return $("a[href=#_panel_toolbox_" + val + "]").tab("show");
        });
        this.from = ko.observable();
        this.to = ko.observable();
        this.isManyPaths = ko.observable(false);
        this.foundNodes = [];
        this.findNode = ko.observable();
        this.findNode.subscribe(function(val) {
          return _this.panel.higlightSearch(val);
        });
      }

      PanelToolbox.prototype._getTextCls = function() {
        var cls;

        cls = "text";
        if (this.colorScheme() === 1) {
          cls += " light";
        }
        if (this.font() === 1) {
          cls += " big";
        } else if (this.font() === 2) {
          cls += " hidden";
        }
        return cls;
      };

      PanelToolbox.prototype.reset = function() {
        return this.panel.resetPositions();
      };

      PanelToolbox.prototype.hide = function() {
        return this.isShown(false);
      };

      PanelToolbox.prototype.show = function() {
        return this.isShown(true);
      };

      PanelToolbox.prototype.getSettingsName = function() {
        return "panelToolbox";
      };

      PanelToolbox.prototype.initializeSettings = function(val, _settingsChangedCallback) {
        var _this = this;

        this._settingsChangedCallback = _settingsChangedCallback;
        if (val) {
          if (val.colorScheme) {
            this.colorScheme(val.colorScheme);
          }
          if (val.font) {
            this.font(val.font);
          }
          if (val.layout) {
            this.layout(val.layout);
          }
          if (val.isShown != null) {
            this.isShown(val.isShown);
          }
          if (val.from) {
            this.from(val.from);
          }
          if (val.to) {
            this.to(val.to);
          }
          if (val.isManyPaths) {
            this.isManyPaths(val.isManyPaths);
          }
          if (val.activeTab) {
            this.activeTab(val.activeTab);
          }
        }
        this.isShown.subscribe(function() {
          return _this.onSettingsChanged();
        });
        this.colorScheme.subscribe(function() {
          return _this.onSettingsChanged();
        });
        this.font.subscribe(function() {
          return _this.onSettingsChanged();
        });
        this.layout.subscribe(function() {
          return _this.onSettingsChanged();
        });
        this.activeTab.subscribe(function() {
          return _this.onSettingsChanged();
        });
        this.from.subscribe(function() {
          return _this.onSettingsChanged();
        });
        this.to.subscribe(function() {
          return _this.onSettingsChanged();
        });
        return this.isManyPaths(function() {
          return _this.onSettingsChanged();
        });
      };

      PanelToolbox.prototype._getSettings = function() {
        return {
          colorScheme: this.colorScheme(),
          font: this.font(),
          layout: this.layout(),
          isShown: this.isShown(),
          from: this.from(),
          to: this.to(),
          isManyPaths: this.isManyPaths(),
          activeTab: this.activeTab()
        };
      };

      PanelToolbox.prototype.onSettingsChanged = function() {
        if (this._settingsChangedCallback) {
          return this._settingsChangedCallback(this._getSettings());
        }
      };

      PanelToolbox.prototype.find = function(data, event) {
        event.preventDefault();
        return pubSub.pub("crud", "reload", {
          _body: {
            from: this.from(),
            to: this.to(),
            isManyPaths: this.isManyPaths()
          }
        });
      };

      PanelToolbox.prototype.switchActive = function(data, event) {
        var r;

        event.preventDefault();
        r = $(event.currentTarget).attr("href").match(/#_panel_toolbox_(\w+)/);
        return this.activeTab(r[1]);
      };

      return PanelToolbox;

    })();
  });

}).call(this);

/*
//@ sourceMappingURL=panelToolbox.map
*/

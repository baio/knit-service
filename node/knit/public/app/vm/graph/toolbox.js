// Generated by CoffeeScript 1.6.2
(function() {
  define(["app/vm/graph/linksCache"], function(linksCache) {
    var Toolbox;

    return Toolbox = (function() {
      function Toolbox(nav, panel) {
        var _this = this;

        this.nav = nav;
        this.panel = panel;
        this.name_src = ko.observable();
        this.name_tgt = ko.observable();
        this.tags = ko.observableArray();
        this.url_src = ko.computed(function() {
          return "https://www.google.ru/search?q=" + (_this.name_src());
        });
        this.url_tgt = ko.computed(function() {
          return "https://www.google.ru/search?q=" + (_this.name_tgt());
        });
        this.panel.onHoverEdge = function(edge) {
          var tag, _i, _len, _ref, _t, _u;

          _this.name_src(edge.source.name);
          _this.name_tgt(edge.target.name);
          _t = [];
          _ref = edge.tags;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _u = tag.urls.map(function(m) {
              return {
                href: ko.observable(m),
                title: ko.observable(m)
              };
            });
            _t.push({
              name: ko.observable(tag.val),
              urls: ko.observableArray(_u)
            });
          }
          return _this.tags(_t);
        };
        this.panel.onDblClickSvg = function() {
          var offset, pos, x, y;

          pos = d3.mouse(this);
          offset = $("#_body").offset();
          x = pos[0] - $(document).scrollLeft() - offset.left;
          y = pos[1] - $(document).scrollTop() - offset.top;
          $("#_toolbox").css({
            left: x,
            top: y
          });
          return _this.isShown(true);
        };
        this.isShown = ko.observable(false);
      }

      Toolbox.prototype.moveToConner = function(data, event) {
        event.preventDefault();
        return $("#_toolbox").css({
          left: '',
          top: ''
        });
      };

      Toolbox.prototype.hide = function() {
        return this.isShown(false);
      };

      Toolbox.prototype.show = function() {
        return this.isShown(true);
      };

      Toolbox.prototype.linksShown = function(data, event) {
        console.log("links shown");
        return linksCache.getTitles(data.urls);
      };

      return Toolbox;

    })();
  });

}).call(this);

/*
//@ sourceMappingURL=toolbox.map
*/

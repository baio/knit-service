// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["ural/vm/itemVM", "app/dataProvider", "ural/modules/pubSub", "app/vm/user/pushes", "app/vm/user/pulls"], function(itemVM, dataProvider, pubSub, Pushes, Pulls) {
    var Graph;

    return Graph = (function(_super) {
      __extends(Graph, _super);

      function Graph(resource, _index, _contribs) {
        this._contribs = _contribs;
        this.ref = ko.observable();
        this.name = ko.observable().extend({
          required: {
            message: "Имя должно быть заполнено."
          },
          minLength: {
            message: "Имя должно сотоять как минимум из 3-х символов.",
            params: 3
          }
        });
        this.date = ko.observable();
        this.contribs = ko.observableArray();
        /*
        @pushes = new Pushes(@)
        @pulls = new Pulls(@)
        @_linkedContribs = ko.computed =>
          if @contribs()
            @contribs().filter((f) => @_contribs.list().filter((m) -> m.ref() == f)[0])
          else
            []
        */

        Graph.__super__.constructor.call(this, "graph", _index);
      }

      /*
      map: (data, skipStratEdit) ->
        super data, skipStratEdit
        for contrib in @_contribs.list()
          if @contribs()
            contrib.isSelected @contribs().filter((f) -> f == contrib.ref()).length
          else
            contrib.isSelected false
      */


      Graph.prototype.onCreateItem = function() {
        return new Graph(this.resource, this._index, this._contribs);
      };

      Graph.prototype.onCreate = function(done) {
        var data;

        data = {
          name: this.name(),
          contribs: this._contribs.list().filter(function(f) {
            return f.isSelected();
          }).map(function(m) {
            return m.ref();
          })
        };
        return dataProvider.ajax("graphs", "post", data, done);
      };

      Graph.prototype.onRemove = function(done) {
        var data;

        data = this.toData();
        return dataProvider.ajax("graphs", "delete", data, done);
      };

      Graph.prototype.onUpdate = function(done) {
        var data;

        data = {
          id: this.ref(),
          name: this.name(),
          contribs: this.contribs().map(function(m) {
            return m.ref();
          })
        };
        return dataProvider.ajax("graphs", "put", data, done);
      };

      Graph.prototype.completeCreate = function(data) {
        pubSub.pub("graph", "added", data);
        return Graph.__super__.completeCreate.call(this, data);
      };

      Graph.prototype.completeRemove = function() {
        pubSub.pub("graph", "removed", this.toData());
        return Graph.__super__.completeRemove.call(this);
      };

      Graph.prototype.open = function(data, event) {
        event.preventDefault();
        return pubSub.pub("href", "change", {
          href: "/graph/panel/" + (this.ref())
        });
      };

      Graph.prototype.dropUpdate = function(list, item) {
        return this.update(function(err) {
          return pubSub.pub("msg", "show", {
            err: err,
            msg: "Сохранено"
          });
        });
      };

      return Graph;

    })(itemVM);
  });

}).call(this);

/*
//@ sourceMappingURL=graph.map
*/

// Generated by CoffeeScript 1.6.2
(function() {
  var copyFromOldVersion, es, fs, jsonSparql2struct, pedia2es, req, requestData, struct2es, _ES_URI, _RQ_TEMPLATE, _SPARQL_URI;

  fs = require("fs");

  req = require("request");

  es = require("../es/es");

  _SPARQL_URI = "http://dbpedia.org/sparql";

  _ES_URI = "http://188.244.44.9:9201";

  _RQ_TEMPLATE = "dbpedia_request_template.txt";

  jsonSparql2struct = function(j) {
    var en_name, foaf_name, foaf_name_lang, i, id, item, latest, name, name_lang, res, spt, _i, _len, _ref;

    latest = null;
    res = [];
    _ref = j.results.bindings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.given_name) {
        id = i.s.value.toLowerCase();
        en_name = (i.sur_name.value + " " + i.given_name.value).toLocaleLowerCase();
        if (id !== latest) {
          item = {
            id: id,
            en_name: en_name,
            ru_name: null
          };
          res.push(item);
          latest = id;
        }
        if (!item.ru_name) {
          if (i.name) {
            name = i.name.value.toLowerCase();
            name_lang = i.name["xml:lang"];
          }
          if (i.foaf_name) {
            foaf_name = i.foaf_name.value.toLowerCase();
            foaf_name_lang = i.foaf_name["xml:lang"];
          }
          if (name_lang === "en") {
            if (name.match(/^[\u0400-\u04FF\s]+$/gi)) {
              item.ru_name = name;
            }
          }
          if (foaf_name_lang === "en") {
            if (foaf_name.match(/[\u0400-\u04FF]+/gi)) {
              item.ru_name = foaf_name;
            }
          }
          if (item.ru_name) {
            spt = item.ru_name.split(" ");
            if (spt.length === 3) {
              if (spt[0].indexOf(',') !== -1) {
                item.ru_name = item.ru_name.replace(/,/g, '');
              } else {
                item.ru_name = "" + spt[2] + " " + spt[0] + " " + spt[1];
              }
            } else {
              item.ru_name = "" + spt[1] + " " + spt[0];
            }
          }
        }
      }
    }
    return res;
  };

  struct2es = function(struct) {
    var data, i, _i, _len;

    data = "";
    for (_i = 0, _len = struct.length; _i < _len; _i++) {
      i = struct[_i];
      data += JSON.stringify({
        "create": {
          "_index": "person-names",
          "_type": "politic-rus",
          "_id": i.en_name
        }
      });
      data += "\r\n";
      data += JSON.stringify({
        "val": i.en_name,
        "lang": "en",
        "uri": i.id
      });
      data += "\r\n";
      if (i.ru_name) {
        data += JSON.stringify({
          "create": {
            "_index": "person-names",
            "_type": "politic-rus",
            "_id": i.ru_name
          }
        });
        data += "\r\n";
        data += JSON.stringify({
          "val": i.ru_name,
          "lang": "ru",
          "uri": i.id
        });
        data += "\r\n";
      }
    }
    return data;
  };

  /*
  j = JSON.parse fs.readFileSync file
  
    struct = jsonSparql2struct "russian-buisness.json"
  
  data = struct2es struct
  
  console.log data
  
  req {method: "post", uri : "http://188.244.44.9:9201/person-names/_bulk", body: data}, (err, resp, body) ->
    console.log err
  */


  pedia2es = function(j, esIndex, done) {
    var data, struct;

    struct = jsonSparql2struct(j);
    data = struct2es(struct);
    return req({
      method: "post",
      uri: "" + _ES_URI + "/" + esIndex + "/_bulk",
      body: data
    }, function(err) {
      return done(err);
    });
  };

  requestData = function() {
    var data, query, tmpl;

    tmpl = fs.readFileSync(_RQ_TEMPLATE, "utf-8");
    query = tmpl.replace("{0}", "").replace("{1}", "").replace("{2}", "?s a yago:RussianPoliticians");
    data = {
      "default-graph-uri": "http://dbpedia.org",
      "query": query,
      "format": "application/sparql-results+json",
      "timeout": 30000
    };
    return req.get({
      uri: _SPARQL_URI,
      qs: data
    }, function(err, data) {
      if (!err) {
        return pedia2es(JSON.parse(data.body), "person-names", function(err) {
          return console.log(err);
        });
      } else {
        return console.log(err);
      }
    });
  };

  copyFromOldVersion = function() {
    return es.copy(_ES_URI, "org-names.ru", "org-names", 1000, function(m) {
      return {
        _id: m._id,
        _type: m._type,
        val: m._id,
        lang: "ru",
        uri: m._id
      };
    }, function(err) {
      return console.log(err);
    });
  };

  copyFromOldVersion();

}).call(this);

/*
//@ sourceMappingURL=converter.map
*/

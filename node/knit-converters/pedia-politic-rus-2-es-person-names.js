// Generated by CoffeeScript 1.6.2
(function() {
  var async, es, fs, jsonSparql2struct, pedia2es, req, _RQ_TEMPLATE, _SPARQL_URI, _createNames;

  fs = require("fs");

  req = require("request");

  es = require("../es/es");

  async = require("async");

  _SPARQL_URI = "http://dbpedia.org/sparql";

  _RQ_TEMPLATE = "dbpedia_people_request_template.txt";

  jsonSparql2struct = function(j) {
    var data, doc, en_name, foaf_name, foaf_name_lang, i, id, item, latest, name, name_lang, obj, res, spt, _i, _j, _len, _len1, _ref;

    latest = null;
    res = [];
    _ref = j.results.bindings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.given_name) {
        id = i.s.value.toLowerCase();
        en_name = (i.sur_name.value + " " + i.given_name.value).toLocaleLowerCase();
        if (id !== latest) {
          item = {
            id: id,
            en_name: en_name,
            ru_name: null
          };
          res.push(item);
          latest = id;
        }
        if (!item.ru_name) {
          if (i.name) {
            name = i.name.value.toLowerCase();
            name_lang = i.name["xml:lang"];
          }
          if (i.foaf_name) {
            foaf_name = i.foaf_name.value.toLowerCase();
            foaf_name_lang = i.foaf_name["xml:lang"];
          }
          if (name_lang === "en") {
            if (name.match(/^[\u0400-\u04FF\s]+$/gi)) {
              item.ru_name = name;
            }
          }
          if (foaf_name_lang === "en") {
            if (foaf_name.match(/[\u0400-\u04FF]+/gi)) {
              item.ru_name = foaf_name;
            }
          }
          if (item.ru_name) {
            spt = item.ru_name.split(" ");
            if (spt.length === 3) {
              if (spt[0].indexOf(',') !== -1) {
                item.ru_name = item.ru_name.replace(/,/g, '');
              } else {
                item.ru_name = "" + spt[2] + " " + spt[0] + " " + spt[1];
              }
            } else {
              item.ru_name = "" + spt[1] + " " + spt[0];
            }
          }
        }
      }
    }
    data = [];
    for (_j = 0, _len1 = res.length; _j < _len1; _j++) {
      doc = res[_j];
      obj = {
        _id: doc.en_name,
        _type: "politic-rus",
        val: doc.en_name,
        lang: "en",
        uri: doc.id
      };
      data.push(obj);
      if (doc.ru_name) {
        obj = {
          _id: doc.ru_name,
          _type: "politic-rus",
          val: doc.ru_name,
          lang: "ru",
          uri: doc.id
        };
        data.push(obj);
      }
    }
    return data;
  };

  pedia2es = function(uri, index, sparqlData, done) {
    var data, opts;

    data = jsonSparql2struct(sparqlData);
    opts = {
      uri: uri,
      index: index,
      settingsPath: "./names_index.json"
    };
    return es.createIndex(opts, function(err) {
      if (!err || err.status === 400) {
        return es.bulk(uri, index, data, done);
      } else {
        return done(err);
      }
    });
  };

  exports.convert = function(esUri, done) {
    var params, tmpl;

    tmpl = fs.readFileSync(_RQ_TEMPLATE, "utf-8");
    params = ["?s a yago:RussianPoliticians", "?s dcterms:subject category:Russian_politicians", "?s dcterms:subject category:Russian_businesspeople"];
    return async.map(params, (function(prm, ck) {
      var query;

      query = tmpl.replace("{0}", "").replace("{1}", "").replace("{2}", prm);
      return _createNames(esUri, query, ck);
    }), done);
  };

  _createNames = function(esUri, query, done) {
    var data;

    console.log(query);
    data = {
      "default-graph-uri": "http://dbpedia.org",
      "query": query,
      "format": "application/sparql-results+json",
      "timeout": 30000
    };
    return req.get({
      uri: _SPARQL_URI,
      qs: data
    }, function(err, data) {
      if (!err) {
        return pedia2es(esUri, "person-names", JSON.parse(data.body), done);
      } else {
        return done(err);
      }
    });
  };

}).call(this);

/*
//@ sourceMappingURL=pedia-politic-rus-2-es-person-names.map
*/

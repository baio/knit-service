// Generated by CoffeeScript 1.6.2
/*
  select ?s, ?given_name, ?sur_name, ?name, ?label, ?foaf_name
	where
	{
		?s a yago:RussianPoliticians.
                optional { ?s foaf:givenName ?given_name }
		            optional { ?s foaf:surname ?sur_name }
                optional { ?s dbpprop:name ?name }
                optional { ?s rdfs:label ?label }
                optional { ?s foaf:name ?foaf_name }

                #filter (!bound(?dateOfDeath))

	}

  select ?s, ?given_name, ?sur_name, ?name, ?label, ?foaf_name
	where
	{
		?s dcterms:subject category:Russian_politicians.
                optional { ?s foaf:givenName ?given_name }
		            optional { ?s foaf:surname ?sur_name }
                optional { ?s dbpprop:name ?name }
                optional { ?s rdfs:label ?label }
                optional { ?s foaf:name ?foaf_name }

	}

select ?s, ?given_name, ?sur_name, ?name, ?label, ?foaf_name
	where
	{
		?s dcterms:subject category:Russian_businesspeople.
                optional { ?s foaf:givenName ?given_name }
		            optional { ?s foaf:surname ?sur_name }
                optional { ?s dbpprop:name ?name }
                optional { ?s rdfs:label ?label }
                optional { ?s foaf:name ?foaf_name }

	}

  Sparql queries often have missing info, when queries executed for batch of resources.
  For example when we rquest info for this particular resource result includes names and labels (for batch request not)

	select ?name, ?label
    where {
     <http://dbpedia.org/resource/Nikolay_Yusupov> dbpprop:name ?name;
      rdfs:label ?label.
    }


  Here simpliest implementation, just load data from dbpedia in json format and convert it.
*/


(function() {
  var data, fs, jsonSparql2struct, req, struct, struct2es;

  fs = require("fs");

  req = require("request");

  jsonSparql2struct = function(file) {
    var en_name, foaf_name, foaf_name_lang, i, id, item, j, latest, name, name_lang, res, spt, _i, _len, _ref;

    j = JSON.parse(fs.readFileSync(file));
    latest = null;
    res = [];
    _ref = j.results.bindings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.given_name) {
        id = i.s.value.toLowerCase();
        en_name = (i.sur_name.value + " " + i.given_name.value).toLocaleLowerCase();
        if (id !== latest) {
          item = {
            id: id,
            en_name: en_name,
            ru_name: null
          };
          res.push(item);
          latest = id;
        }
        if (!item.ru_name) {
          if (i.name) {
            name = i.name.value.toLowerCase();
            name_lang = i.name["xml:lang"];
          }
          if (i.foaf_name) {
            foaf_name = i.foaf_name.value.toLowerCase();
            foaf_name_lang = i.foaf_name["xml:lang"];
          }
          if (name_lang === "en") {
            if (name.match(/^[\u0400-\u04FF\s]+$/gi)) {
              item.ru_name = name;
            }
          }
          if (foaf_name_lang === "en") {
            if (foaf_name.match(/[\u0400-\u04FF]+/gi)) {
              item.ru_name = foaf_name;
            }
          }
          if (item.ru_name) {
            spt = item.ru_name.split(" ");
            if (spt.length === 3) {
              if (spt[0].indexOf(',') !== -1) {
                item.ru_name = item.ru_name.replace(/,/g, '');
              } else {
                item.ru_name = "" + spt[2] + " " + spt[0] + " " + spt[1];
              }
            } else {
              item.ru_name = "" + spt[1] + " " + spt[0];
            }
          }
        }
      }
    }
    return res;
  };

  struct2es = function(struct) {
    var data, i, _i, _len;

    data = "";
    for (_i = 0, _len = struct.length; _i < _len; _i++) {
      i = struct[_i];
      data += JSON.stringify({
        "create": {
          "_index": "person-names",
          "_type": "politic-rus",
          "_id": i.en_name
        }
      });
      data += "\r\n";
      data += JSON.stringify({
        "val": i.en_name,
        "lang": "en",
        "key": i.id
      });
      data += "\r\n";
      if (i.ru_name) {
        data += JSON.stringify({
          "create": {
            "_index": "person-names",
            "_type": "politic-rus",
            "_id": i.ru_name
          }
        });
        data += "\r\n";
        data += JSON.stringify({
          "val": i.ru_name,
          "lang": "ru",
          "key": i.id
        });
        data += "\r\n";
      }
    }
    return data;
  };

  struct = jsonSparql2struct("russian-buisness.json");

  data = struct2es(struct);

  console.log(data);

  req({
    method: "post",
    uri: "http://188.244.44.9:9201/person-names/_bulk",
    body: data
  }, function(err, resp, body) {
    return console.log(err);
  });

}).call(this);

/*
//@ sourceMappingURL=person-names.map
*/

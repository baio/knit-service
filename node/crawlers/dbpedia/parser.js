// Generated by CoffeeScript 1.6.2
(function() {
  var alignPredicate, inflect, neo, store2neo, _;

  _ = require("underscore");

  inflect = require("underscore.inflections");

  neo = require("../../baio-neo4j/neo4j");

  neo.setConfig({
    uri: process.env.NEO4J_URI
  });

  alignPredicate = function(predicate) {
    var p;

    p = "" + (predicate.toLowerCase().match(/^.*\/(.*)$/)[1]);
    p = inflect.singularize(p);
    return "da:" + p;
  };

  store2neo = function(links, done) {
    var batch, i, l, nodes, nodesObj, nodesSubj, _getNodeType, _i, _len;

    _getNodeType = function(link, isSubject) {
      if (isSubject) {
        switch (link.type) {
          case "person_person":
            return "person";
          case "person_org":
            return "person";
          default:
            return "org";
        }
      } else {
        switch (link.type) {
          case "person_person":
            return "person";
          case "org_person":
            return "person";
          default:
            return "org";
        }
      }
    };
    nodesSubj = links.map(function(l) {
      return {
        node: l.subject,
        type: _getNodeType(l, true)
      };
    });
    nodesObj = links.map(function(l) {
      return {
        node: l.object,
        type: _getNodeType(l, false)
      };
    });
    nodes = nodesSubj.concat(nodesObj);
    i = 0;
    for (i = _i = 0, _len = links.length; _i < _len; i = ++_i) {
      l = links[i];
      l.nodes = [i, i + 1];
      i += 2;
    }
    batch = {
      nodeOpts: {
        index: "wiki",
        keyValue: function(m) {
          return {
            uri: m.node
          };
        },
        properties: function(m) {
          return {
            type: m.type
          };
        }
      },
      nodes: nodes,
      relOpts: {
        type: function(m) {
          return m.predicate;
        },
        nodesIndexes: function(m) {
          return m.nodes;
        }
      },
      rels: links
    };
    return neo.createBatch(batch, done);
  };

  exports.parseBindings = function(batch) {
    return batch.results.bindings.map(function(d) {
      return d.s.value;
    });
  };

  exports.parseLinks = function(batch, data, done) {
    var linked, links;

    linked = batch.results.bindings.map(function(m) {
      return {
        object: m.o.value,
        predicate: m.p.value
      };
    });
    links = linked.map(function(m) {
      return {
        subject: data.subject,
        predicate: alignPredicate(m.predicate),
        object: m.object,
        type: data.type
      };
    });
    links = _.uniq(links);
    return store2neo(links, done);
  };

}).call(this);

/*
//@ sourceMappingURL=parser.map
*/

// Generated by CoffeeScript 1.6.2
(function() {
  var craw, getQueryData, onPop, opts, parser, queries;

  craw = require("../../baio-crawler/crawler");

  queries = require("./queries");

  parser = require("./parser");

  getQueryData = function(query, level, data) {
    return {
      "request": {
        "uri": "http://dbpedia.org/sparql",
        "method": "get",
        "qs": {
          "default-graph-uri": "http://dbpedia.org",
          "query": query,
          "format": "application/sparql-results+json",
          "timeout": 30000
        }
      },
      "data": data,
      "level": level
    };
  };

  onPop = function(level, body, data, done) {
    var ex, j, offset, people, person, q, _i, _len;

    try {
      q = [];
      if (level === -1) {
        q.push(getQueryData(queries.peopleReq.replace("{0}", 100).replace("{1}", 0), 0, {
          offset: 0,
          type: "people_list"
        }));
      } else {
        j = JSON.parse(body);
        if (data.type === "people_list") {
          people = parser.parsePeople(j);
          offset = data.offset + 100;
          for (_i = 0, _len = people.length; _i < _len; _i++) {
            person = people[_i];
            q.push(getQueryData(queries.subjectPersonLinks.replace("{0}", person), 1, {
              subject: person,
              type: "person_person"
            }));
            q.push(getQueryData(queries.subjectOrgLinks.replace("{0}", person), 1, {
              subject: person,
              type: "person_org"
            }));
          }
          q.push(getQueryData(queries.peopleReq.replace("{0}", 100).replace("{1}", offset), 0, {
            offset: offset,
            type: "people_list"
          }));
        } else if (data.type === "person_person" || data.type === "person_org") {
          parser.parseLinks(j, data);
        }
      }
      return done(null, q);
    } catch (_error) {
      ex = _error;
      return done(ex);
    }
  };

  opts = {
    amqp: {
      config: {
        url: "amqp://localhost",
        prefetchCount: 1
      },
      queue: "baio-crawler"
    },
    slaveLevel: -1,
    log: {
      level: 0,
      write: {
        loggly: {
          domain: process.env.LOGGLY_DOMAIN,
          username: process.env.LOGGLY_USERNAME,
          password: process.env.LOGGLY_PASSWORD,
          input: process.env.LOGGLY_INPUT
        },
        console: true
      }
    }
  };

  craw.start(opts, onPop, function(err) {
    return console.log("started", err);
  });

  "(level, code, msg) ->\nconsole.log level, code, msg";

}).call(this);

/*
//@ sourceMappingURL=dbpedia.map
*/

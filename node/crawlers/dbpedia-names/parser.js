// Generated by CoffeeScript 1.6.2
(function() {
  var es, queries, _, _alignName;

  queries = require("./queries");

  es = require("../../baio-es/es");

  _ = require("underscore");

  _alignName = function(name) {
    return name.replace(/^\s+|\s+$/g, '').toLowerCase();
  };

  exports.parseNames = function(body, type, done) {
    var docs, names;

    names = [];
    body.results.bindings.forEach(function(m) {
      if (m.given_name && m.sur_name) {
        names.push({
          key: m.s.value,
          val: _alignName(m.given_name.value + " " + m.sur_name.value),
          lang: m.given_name["xml:lang"]
        });
      }
      if (m.name) {
        names.push({
          key: m.s.value,
          val: _alignName(m.name.value),
          lang: m.name["xml:lang"]
        });
      }
      if (m.label) {
        names.push({
          key: m.s.value,
          val: _alignName(m.label.value),
          lang: m.label["xml:lang"]
        });
      }
      if (m.foaf_name) {
        return names.push({
          key: m.s.value,
          val: _alignName(m.foaf_name.value),
          lang: m.foaf_name["xml:lang"]
        });
      }
    });
    names = _.uniq(names, false, function(i) {
      return i.val + i.lang;
    });
    docs = names.map(function(m) {
      return {
        _id: m.val,
        _type: "dbpedia",
        val: m.val,
        lang: m.lang,
        key: m.key
      };
    });
    return es.bulk(process.env.ES_URI, "" + type + "-names", docs, done);
  };

  exports.parseKeys = function(data, done) {
    var nodes, predicates, res;

    predicates = data.predicates.map(function(m) {
      var val;

      val = m.aligned.replace(/^da:/, '');
      return {
        key: m.key,
        val: val,
        lang: "en",
        _id: val,
        _type: "dbpedia"
      };
    });
    nodes = data.nodes;
    res = {
      people: nodes.filter(function(f) {
        return f.type === "person";
      }).map(function(m) {
        return decodeURIComponent(m.node);
      }),
      orgs: nodes.filter(function(f) {
        return f.type === "org";
      }).map(function(m) {
        return decodeURIComponent(m.node);
      })
    };
    return es.bulk(process.env.ES_URI, "predicate-names", predicates, function(err) {
      return done(err, res);
    });
  };

}).call(this);

/*
//@ sourceMappingURL=parser.map
*/

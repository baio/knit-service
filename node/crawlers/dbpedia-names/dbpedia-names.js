// Generated by CoffeeScript 1.6.2
(function() {
  var craw, crawOpts, getPediaQueryData, onPop, parser, queries;

  craw = require("../../baio-crawler/crawler");

  queries = require("./queries");

  parser = require("./parser");

  getPediaQueryData = function(query, level, data) {
    return {
      "request": {
        "uri": "http://dbpedia.org/sparql",
        "method": "get",
        "qs": {
          "default-graph-uri": "http://dbpedia.org",
          "query": query,
          "format": "application/sparql-results+json",
          "timeout": 30000
        }
      },
      "data": data,
      "level": level
    };
  };

  /*
    Levels :
    0. null - request to dbpedia
    1. 0 - parse dbpedia response
  */


  onPop = function(level, body, data, done) {
    var ex, q;

    try {
      q = [];
      if (level === null) {
        return parser.parseKeys(data, function(err, keys) {
          if (!err) {
            if (keys.people.length) {
              q.push(getPediaQueryData(queries.personNameReq.replace("{0}", (keys.people.map(function(m) {
                return "?s=`iri('" + m + "')`";
              })).join(" or ")), 0, {
                type: "person"
              }));
            }
            if (keys.orgs.length) {
              q.push(getPediaQueryData(queries.orgNameReq.replace("{0}", (keys.orgs.map(function(m) {
                return "?s=`iri('" + m + "')`";
              })).join(" or ")), 0, {
                type: "org"
              }));
            }
          }
          return done(err, q);
        });
      } else if (level === 0) {
        return parser.parseNames(JSON.parse(body), data.type, done);
      }
    } catch (_error) {
      ex = _error;
      return done(ex);
    }
  };

  crawOpts = {
    amqp: {
      config: {
        url: process.env.AMQP_URI,
        prefetchCount: parseInt(process.env.AMQP_PREFETCH_COUNT)
      },
      queue: null
    },
    slaveLevel: parseInt(process.env.CRAWLER_SLAVE_LEVEL),
    skipInitial: {
      name: process.env.APP_NAME,
      val: process.env.CRAWLER_SKIP_INITIAL === "true" ? true : process.env.CRAWLER_SKIP_INITIAL === "false" ? void 0 : null
    },
    beforeQuery: function(opts) {
      opts.qs.query = opts.qs.query.replace(/([^('])'([^)])/g, "$1\\'$2");
      return opts.qs.query = opts.qs.query.replace(/<([^>]*)>/g, "iri('$1')");
    },
    log: {
      loggly: {
        level: parseInt(process.env.CRAWLER_LOG_LEVEL_LOGGLY),
        domain: process.env.LOGGLY_DOMAIN,
        username: process.env.LOGGLY_USERNAME,
        password: process.env.LOGGLY_PASSWORD,
        input: process.env.APP_NAME
      },
      console: {
        level: parseInt(process.env.CRAWLER_LOG_LEVEL_CONSOLE)
      }
    }
  };

  exports.start = function(done) {
    crawOpts.amqp.queue = process.env.APP_NAME;
    return craw.start(crawOpts, onPop, done);
  };

}).call(this);

/*
//@ sourceMappingURL=dbpedia-names.map
*/

// Generated by CoffeeScript 1.6.2
(function() {
  var async, req, _config, _getCreateNode, _getCreateRelation, _getGetRelation, _q;

  async = require("async");

  req = require("request");

  _config = null;

  exports.setConfig = function(config) {
    return _config = config;
  };

  _q = function(uri, method, data, done) {
    var body;

    if (data) {
      body = JSON.stringify(data);
    }
    console.log(uri);
    return req({
      uri: uri,
      method: method,
      body: body,
      headers: {
        'content-type': 'application/json',
        'X-Stream': true
      }
    }, function(err, resp) {
      var j;

      if (!err) {
        j = resp.body ? JSON.parse(resp.body) : null;
      }
      if (Array.isArray(j) && j[0] && (j[0].status < 200 || j[0].status > 299)) {
        err = j;
      }
      return done(err, j);
    });
  };

  exports.query = function(query, params, done) {
    var data;

    data = {
      query: query,
      params: params
    };
    return _q(_config.uri + "/cypher", "post", data, function(err, j) {
      var c, i, obj, r, res, _i, _j, _len, _len1, _ref, _ref1;

      if (!err) {
        res = [];
        _ref = j.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          obj = {};
          res.push(obj);
          _ref1 = j.columns;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            c = _ref1[i];
            obj[c] = r[i];
          }
        }
      }
      return done(err, res);
    });
  };

  _getCreateNode = function(index, keyVal, properties, strategy) {
    return {
      path: "/index/node/" + index + "?uniqueness=" + strategy,
      method: "post",
      data: {
        key: Object.keys(keyVal)[0],
        value: keyVal[Object.keys(keyVal)[0]],
        properties: properties
      }
    };
  };

  exports.createNode = function(index, keyVal, properties, strategy, done) {
    var q;

    q = _getCreateNode(index, keyVal, properties, strategy);
    return _q(_config.uri + q.path, q.method, q.data, done);
  };

  _getCreateRelation = function(index, type, keyVal, startId, endId, properties, strategy) {
    var endUrl, startUrl;

    if (typeof startId === "object") {
      startUrl = startId.self;
    } else {
      startUrl = "" + _config.uri + "/node/" + startId;
    }
    if (typeof endId === "object") {
      endUrl = endId.self;
    } else {
      endUrl = "" + _config.uri + "/node/" + endId;
    }
    return {
      path: "/index/relationship/" + index + "?uniqueness=" + strategy,
      method: "post",
      data: {
        key: Object.keys(keyVal)[0],
        value: keyVal[Object.keys(keyVal)[0]],
        properties: properties,
        start: startUrl,
        end: endUrl,
        type: type
      }
    };
  };

  exports.createRelation = function(index, type, keyVal, startId, endId, properties, strategy, done) {
    var q;

    q = _getCreateRelation(index, type, keyVal, startId, endId, properties, strategy);
    return _q(_config.uri + q.path, q.method, q.data, done);
  };

  exports.createLabels = function(id, labels, done) {
    var url;

    if (typeof id === "object") {
      url = id.labels;
    } else {
      url = "" + _config.uri + "/node/" + id + "/labels";
    }
    return _q(url, "post", labels, done);
  };

  exports.createNodesBatch = function(nodeOpts, nodes, done) {
    var data;

    data = nodes.map(function(m) {
      var q;

      q = _getCreateNode(nodeOpts.index, nodeOpts.keyVal(m), nodeOpts.properties(m), nodeOpts.strategy);
      return {
        method: q.method,
        to: q.path,
        body: q.data
      };
    });
    console.log(data);
    return _q(_config.uri + "/batch", "post", data, done);
  };

  exports.createRelationsBatch = function(relOpts, rels, done) {
    var data;

    data = rels.map(function(m) {
      var q;

      q = _getCreateRelation(relOpts.index, relOpts.type(m), relOpts.keyVal(m), relOpts.startId(m), relOpts.endId(m), relOpts.properties(m), relOpts.strategy);
      return {
        method: q.method,
        to: q.path,
        body: q.data
      };
    });
    console.log(data);
    return _q(_config.uri + "/batch", "post", data, done);
  };

  _getGetRelation = function(startId, type) {
    var startUrl;

    if (typeof startId === "object") {
      startUrl = startId.self;
    } else {
      startUrl = "/node/" + startId;
    }
    return {
      path: "" + startUrl + "/relationships/all/" + type,
      method: "get"
    };
  };

  exports.getRelation = function(startId, type, done) {
    var q;

    q = _getGetRelation(startId, type);
    console.log(q);
    return _q(_config.uri + q.path, q.method, null, done);
  };

}).call(this);

/*
//@ sourceMappingURL=neo4j.map
*/
